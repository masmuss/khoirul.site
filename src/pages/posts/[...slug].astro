---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import { getPosts, getReadTimeCount } from "@/lib/utils/posts";
import type { CollectionPosts } from "@/types";
import PostImage from "@/components/post/PostImage.astro";
import TableOfContents from "@/components/post/TableOfContents.svelte";
import BackButton from "@/components/BackButton.astro";
import Comments from "@/components/Comments.svelte";

type Props = {
	post: CollectionEntry<"blog">;
};

export async function getStaticPaths() {
	const posts = await getPosts();

	return posts.map((post: CollectionPosts) => {
		return {
			params: { slug: post.data.slug },
			props: {
				post,
			},
		};
	});
}

const { post } = Astro.props;
const { title, image, description, date, tag } = post.data;

const { Content, headings } = await render(post);
const isHasToc = post.data.toc;

function getDate(date: string): string {
	return new Date(date).toISOString();
}
---

<Layout title={title} description={description} pageType="article">
  <div class="relative">
    {
      isHasToc && (
        <aside
          class="
        absolute right-full mr-8 w-64
        hidden xl:block
        h-full
        "
        >
          <TableOfContents headings={headings} client:load />
        </aside>
      )
    }
    <article class="prose">
      <h1>{title}</h1>
      <p class="op-50">
        {date && <time datetime={getDate(date)}>{date.split(",")}</time>}
        <span>· {getReadTimeCount(post.body!)} min reads</span>
        {tag && (<span>· {tag}</span>)}
      </p>
      {image && <PostImage src={image.src} alt={image.alt} />}
      <Content />
    </article>

    <div class="md:px-8 mt-12">
      <Comments client:load/>
      {Astro.url.pathname !== "/" && <BackButton pathName={Astro.url.pathname} />}
    </div>
  </div>
</Layout>
